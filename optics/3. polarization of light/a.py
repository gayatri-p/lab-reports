import numpy as np


def fivePointsToConic(points, f=1.0):
    """Solve for the coefficients of a conic given five points in Numpy array

    `points` should have at least five rows.

    `f` is the constant that you can specify. With the returned solution,
    `(a, b, c, d, e, f)`, the full conic is specified as:

    $a x^2 + b x y + c y^2 + d x + e y = -f$

    If `points` has exactly five rows, the equation will be exact. If `points`
    has *more* than five rows, the solution will be a least-squares one that
    fits the data the best.
    """
    from numpy.linalg import lstsq

    x = points[:, 0]
    y = points[:, 1]
    if max(x.shape) < 5:
        raise ValueError('Need >= 5 points to solve for conic section')

    A = np.vstack([x**2, x * y, y**2, x, y]).T
    fullSolution = lstsq(A, f * np.ones(x.size))
    (a, b, c, d, e) = fullSolution[0]
    return (a, b, c, d, e, f)

def cone(x, y, A, B, C, D, e, f):
    return A*x**2 + B*y**2 + C*x*y + D*x + e*y + f

if __name__ == '__main__':
    points = np.array([(99.81902132915027, -14.028648576774641),
 (97.8637155267713, -31.797848721182117),
 (92.79779200947323, -49.341461248797124),
 (84.1595484851979, -65.7526455647803),
 (71.5300618197619, -79.44218184353349),
 (55.906482376603094, -89.46907414450295),
 (51.20000000000002, -88.68100134752652),
 (47.79220509160364, -89.88406495303877),
 (44.31932294037572, -90.86807808084578),
 (40.8363589648103, -91.71996394731715),
 (37.160974066858465, -91.97663837302531),
 (30.283665448744827, -93.20353859692506),
 (23.297078546247974, -93.43947844037847),
 (16.375023153991496, -92.86737110905122),
 (9.658430005931136, -91.89382313202847),
 (-3.1514245522358184, -90.24499167982434),
 (-12.121977093621732, -86.25234878739076),
 (-26.05013262580808, -80.17406432368143),
 (-38.02719658565715, -71.51875502157309),
 (-49.31448417358521, -63.11966136389844),
 (-59.3772715556438, -53.463535448072776),
 (-68.09826212136102, -42.55251691792634),
 (-77.32713347087008, -31.242189890887065),
 (-85.39228554406122, -18.150690608390406),
 (-92.24377333386253, -3.221223545640833),
 (-96.9, 1.1866827483737853e-14),
 (-98.43999646138093, 3.4376004251963623),
 (-99.2576230008525, 6.94076913754049),
 (-100.14835486358513, 10.52601625105273),
 (-100.21512855664692, 14.084317817158611),
 (-100.25342925664278, 17.6773844864935),
 (-100.16231431514171, 21.290157139738554),
 (-100.13451895168284, 24.96633962588571),
 (-99.68283786880367, 28.583593798222818),
 (-99.100088997955, 32.19957081386953),
 (-98.10390961004883, 35.70690296319983),
 (-97.07614957314263, 39.22131033064601),
 (-93.06267628733092, 49.482302717632884),
 (-87.3805601473014, 58.938932025816726),
 (-80.35806208318078, 67.42842025611799),
 (-72.10553885364392, 74.66747127515198),
 (-62.79747048321715, 80.37709686788564),
 (-53.044918349743796, 84.88961442525824),
 (-35.999693627269146, 89.10236842386827),
 (-18.982337371661426, 89.30487594699646),
 (-3.0257863641068328, 86.6471847025556),
 (11.56528468978144, 82.29127651242449),
 (24.783162948870785, 76.27473260687131),
 (37.088253460085376, 69.75285983585522),
 (48.945087288389836, 62.6468549117344),
 (60.491988793859896, 54.46723135761106),
 (71.82967374444928, 44.88416168055246),
 (76.37496678229718, 40.609290180979556),
 (80.66606390984165, 35.914845583593156),
 (84.66630513281035, 30.81601491364275),
 (88.53220219591917, 25.38620047074562),
 (93.55673653615976, 16.496576878358383),
 (97.46200771038482, 6.815207484801042),
 (100.73859536352485, 3.5178692676120975)])
    soln = fivePointsToConic(points)
    print(soln)
    a, b, c, d, e, f = soln
    xfit = np.arange(-100, 100, 1)
    yfit = cone(xfit, A_fit, B_fit, C_fit, D_fit)

